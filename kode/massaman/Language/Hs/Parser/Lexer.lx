%if style == code
\begin{code}
-- Copyright (c) 2006-2008
--         The President and Fellows of Harvard College.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions
-- are met:
-- 1. Redistributions of source code must retain the above copyright
--    notice, this list of conditions and the following disclaimer.
-- 2. Redistributions in binary form must reproduce the above copyright
--    notice, this list of conditions and the following disclaimer in the
--    documentation and/or other materials provided with the distribution.
-- 3. Neither the name of the University nor the names of its contributors
--    may be used to endorse or promote products derived from this software
--    without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
-- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-- IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-- ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
-- FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-- DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-- OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-- HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-- LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-- OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
-- SUCH DAMAGE.

{
{-# OPTIONS -w #-}
{-# OPTIONS -fglasgow-exts #-}

--------------------------------------------------------------------------------
-- |
-- Module      :  Language.Hs.Parser.Lexer
-- Copyright   :  (c) Harvard University 2006-2008
-- License     :  BSD-style
-- Maintainer  :  mainland@eecs.harvard.edu
--
--------------------------------------------------------------------------------

module Language.Hs.Parser.Lexer (
    exp,
    pat,
    lexToken
  ) where

import Prelude hiding(exp)

import Control.Exception
import Control.Monad.Error
import Control.Monad.Identity
import Control.Monad.State
import qualified Data.ByteString.Char8 as B
import Data.Char (isDigit, isOctDigit, isHexDigit, chr)
import qualified Data.Map as Map
import Data.Maybe (fromJust)

import Control.Monad.ContextException
import Control.Monad.Exception
import Data.Loc
import Language.Hs.Parser.Exceptions
import Language.Hs.Parser.Monad
import Language.Hs.Parser.Tokens
import Text.PrettyPrint.Mainland
}
\end{code}
%endif

\section{Lexer}

%if style == code
\begin{code}
$special   = [\(\)\,\;\[\]\`\{\}]

$uniWhite  = []
$whitechar = [\ \t\n\r\f\v]

$ascSmall = [a-z]
$uniSmall = []
$small    = [$ascSmall $uniSmall \_]

$ascLarge = [A-Z]
$uniLarge = []
$large    = [$ascLarge $uniLarge]

$ascSymbol = [\!\#\$\%\&\*\+\.\/\<\=\>\?\@\\\^\|\-\~]
$uniSymbol = []
$symbol    = [$ascSymbol $uniSymbol] # [$special \_\:\"\']

$ascDigit = [0-9]
$uniDigit = []
$digit    = [$ascDigit $uniDigit]
$octit    = [0-7]
$hexit    = [$digit A-F a-f]

$idchar = [$small $large $digit \']
@varid  = $small $idchar* \#?
@conid  = $large $idchar* \#?

$symchar = [$symbol \:]
@varsym  = $symbol $symchar*
@consym  = \: $symchar*

@decimal     = $digit+
@octal       = $octit+
@hexadecimal = $hexit+
@exponent    = [eE] [\-\+] @decimal
\end{code}
%endif

\begin{code}
massaman :-

<exp, pat> {
 "$int:"     @varid  / { allowAnti } { anti Tanti_int }
 "$flo:"     @varid  / { allowAnti } { anti Tanti_float }
 "$id:"      @varid  / { allowAnti } { anti Tanti_id }
 "$var:"     @varid  / { allowAnti } { anti Tanti_var }
 "$ty:"      @varid  / { allowAnti } { anti Tanti_type }
 "$exp:"     @varid  / { allowAnti } { anti Tanti_exp }
}

<0, exp, pat> {
  $whitechar+  { token1 Tws }
  "--"\-*.*    { token1 Tws }
  "{-"         { lex_ncomment }

  "("  { token Tlparen }
  ")"  { token Trparen }
  ","  { token Tcomma }
  ";"  { token Tsemi }
  "["  { token Tlbrack }
  "]"  { token Trbrack }
  "`"  { token Tbackquote }
  "{"  { token Tlbrace }
  "}"  { token Trbrace }

  ".."  { token Tdotdot }
  "::"  { token Tdcolon }
  "="   { token Tequal }
  \\    { token Tlam }
  "|"   { token Tvbar }
  "<-"  { token Tlarrow }
  "->"  { token Trarrow }
  "@"   { token Tat }
  "~"   { token Ttilda }
  "=>"  { token Tdarrow }
  "-"   { token Tminus }
  "!"   { token Tbang }
\end{code}

%if style == code
\begin{code}
  \'  { lex_char_tok }
  \"  { lex_string_tok }
\end{code}
%endif

\begin{code}
  (@conid \.)+ @varid  { qualified Tqvarid }
  (@conid \.)+ @conid  { qualified Tqconid }
  @varid               { unqualified Tqvarid }
  @conid               { unqualified Tqconid }

  (@conid \.)+ @varsym  { qualified Tqvarsym }
  (@conid \.)+ @consym  { qualified Tqconsym }
  @varsym               { varsym }
  @consym               { unqualified Tqconsym }

  @decimal            { token1 $ Tinteger . read }
  0[oO] @octal        { token1 $ Tinteger . read }
  0[xX] @hexadecimal  { token1 $ Tinteger . read }

  @decimal (\. @decimal @exponent? | @exponent)  { token1 $ Tfloat . read }
}
\end{code}

\begin{code}
{
asciiEsc :: [(String, Char)]
asciiEsc = [  ("NUL", '\NUL'),
              ("SOH", '\SOH'),
              ("STX", '\STX'),
              ("ETX", '\ETX'),
              ("EOT", '\EOT'),
              ("ENQ", '\ENQ'),
              ("ACK", '\ACK'),
              ("BEL", '\BEL'),
              ("BS", '\BS'),
              ("HT", '\HT'),
              ("LF", '\LF'),
              ("VT", '\VT'),
              ("FF", '\FF'),
              ("CR", '\CR'),
              ("SO", '\SO'),
              ("SI", '\SI'),
              ("DLE", '\DLE'),
              ("DC1", '\DC1'),
              ("DC2", '\DC2'),
              ("DC3", '\DC3'),
              ("DC4", '\DC4'),
              ("NAK", '\NAK'),
              ("SYN", '\SYN'),
              ("ETB", '\ETB'),
              ("CAN", '\CAN'),
              ("EM", '\EM'),
              ("SUB", '\SUB'),
              ("ESC", '\ESC'),
              ("FS", '\FS'),
              ("GS", '\GS'),
              ("RS", '\RS'),
              ("US", '\US'),
              ("SP", '\SP'),
              ("DEL", '\DEL')
           ]

asciiEscMap :: Map.Map String Char
asciiEscMap = Map.fromList asciiEsc

charEsc :: [(Char, Char)]
charEsc = [  ('a',  '\a'),
             ('b',  '\b'),
             ('f',  '\f'),
             ('n',  '\n'),
             ('r',  '\r'),
             ('t',  '\t'),
             ('v',  '\v'),
             ('\\', '\\'),
             ('\'', '\''),
             ('"',  '"')
          ]

charEscMap :: Map.Map Char Char
charEscMap = Map.fromList charEsc

keywords :: [(String, Token)]
keywords = [  ("case",      Tcase),
              ("class",     Tclass),
              ("data",      Tdata),
              ("default",   Tdefault),
              ("deriving",  Tderiving),
              ("do",        Tdo),
              ("else",      Telse),
              ("if",        Tif),
              ("import",    Timport),
              ("in",        Tin),
              ("infix",     Tinfix),
              ("infixl",    Tinfixl),
              ("infixr",    Tinfixr),
              ("instance",  Tinstance),
              ("let",       Tlet),
              ("module",    Tmodule),
              ("newtype",   Tnewtype),
              ("of",        Tof),
              ("then",      Tthen),
              ("type",      Ttype),
              ("where",     Twhere),
              ("_" ,        Tunderscore),

              ("as" ,        Tunderscore),
              ("qualified",  Tqualified),
              ("hiding",     Thiding)
           ]

keywordsMap :: Map.Map String Token
keywordsMap = Map.fromList keywords
\end{code}

\subsection{Lexer Actions}

\begin{code}
type Action m = Pos -> B.ByteString -> Int -> m (L Token)

locateTok :: MonadParser m => Pos -> Token -> m (L Token)
locateTok end tok =
    do  start <- getLastPos
        setLastPos end
        return $ L (Loc start end) tok

token :: MonadParser m => Token -> Action m
token tok pos buf len =
    do  let s = B.unpack $ B.take len buf
        locateTok pos tok

token1 :: MonadParser m => (String -> Token) -> Action m
token1 tok pos buf len =
    do  let s = B.unpack $ B.take len buf
        locateTok pos (tok s)

allowAnti  ::  PEnv         -- ^ Predicate state
           ->  AlexInput    -- ^ Input stream before the token
           ->  Int          -- ^ Length of the token
           ->  AlexInput    -- ^ Input stream after the token
           ->  Bool
allowAnti  (PEnv { context = ParseExpression })  _ _ _  = True
allowAnti  (PEnv { context = ParsePattern })     _ _ _  = True
allowAnti  _                                     _ _ _  = False

anti :: MonadParser m => (String -> Token) -> Action m
anti antiTok pos buf len = do
    let s = B.tail $ B.dropWhile ((/=) ':') $ B.take len buf
    locateTok pos (antiTok $ B.unpack s)

qualified :: MonadParser m => ([String] -> String -> Token) -> Action m
qualified tok pos buf len = do
    let s = B.unpack $ B.take len buf
    let xs = split '.' s
    locateTok pos $ tok (tail xs) (head xs)
  where
    split :: Eq a => a -> [a] -> [[a]]
    split x xs = go x xs []

    go :: Eq a => a -> [a] -> [[a]] -> [[a]]
    go x  []         []                    = []
    go x  []        (z : zs)               = reverse z : zs
    go x  (y : ys)  []        | y == x     = go x ys [[]]
                              | otherwise  = go x ys [[y]]
    go x  (y : ys)  (z : zs)  | y == x     = go x ys ([] : reverse z : zs)
                              | otherwise  = go x ys ((y : z) : zs)

varsym :: MonadParser m => Action m
varsym pos buf len = do
    let s = B.unpack $ B.take len buf
    case s of
      ":"  -> locateTok pos $ Tcolon
      _    -> locateTok pos $ Tqvarsym [] s

unqualified :: MonadParser m => ([String] -> String -> Token) -> Action m
unqualified tok pos buf len = do
    let s = B.unpack $ B.take len buf
    case Map.lookup s keywordsMap of
      Nothing   -> locateTok pos $ tok [] s
      Just tok  -> locateTok pos tok

lex_ncomment :: MonadParser m => Action m
lex_ncomment pos buf len = do
    input <- getInput
    scan 1 "" input
  where
    scan :: MonadParser m => Int -> String -> AlexInput -> m (L Token)
    scan 0 s input =
        do  setInput input
            locateTok pos $ Tws (reverse s)

    scan n s input =
        do  (c, input) <- alexGetCharOrFail input
            case c of
              '-' ->
                  do  (c2, input) <- alexGetCharOrFail input
                      case c2 of
                        '}'  -> scan  (n-1)  ('}'  : s)  input
                        _    -> scan  n      (c    : s)  input
              '{' ->
                  do  (c2, input) <- alexGetCharOrFail input
                      case c2 of
                        '-'  -> scan  (n+1)  ('-'  : s)  input
                        _    -> scan  n      (c    : s)  input
              _ -> scan n (c : s) input

lex_char_tok :: MonadParser m => Action m
lex_char_tok pos buf len =
    do  input <- getInput
        (c, input) <- alexGetCharOrFail input
        case c of
          '\''  -> throwExceptionAt pos EmptyCharacterLiteral
          '\\'  -> do  setInput input
                       c <- lex_escape
                       input <- getInput
                       (quote, input) <- alexGetCharOrFail input
                       when (quote /= '\'') $
                           throwExceptionAt pos IllegalCharacterLiteral
                       setInput input
                       end <- getPos
                       locateTok end (Tchar c)
          _ ->     do  (quote, input) <- alexGetCharOrFail input
                       when (quote /= '\'') $
                           throwExceptionAt pos IllegalCharacterLiteral
                       setInput input
                       end <- getPos
                       locateTok end (Tchar c)

lex_string_tok :: MonadParser m => Action m
lex_string_tok pos buf len =
    do  s <- lex_string ""
        end <- getPos
        locateTok end (Tstring (reverse s))
  where
    lex_string :: MonadParser m => String -> m String
    lex_string s =
        do  input <- getInput
            (c, input) <- alexGetCharOrFail input
            case c of
              '"'   -> setInput input >> return s
              '\\'  -> do  setInput input
                           c <- lex_escape
                           lex_string (c : s)
              _     -> do  setInput input
                           lex_string (c : s)

lex_escape :: MonadParser m => m Char
lex_escape =
    do  pos <- getPos
        input <- getInput
        (c, input) <- alexGetCharOrFail input
        case c of
          '^' ->
              do  (cntrl, input) <- alexGetCharOrFail input
                  if cntrl >= '@' && cntrl <= '_'
                    then do  setInput input
                             return $ chr (ord cntrl - ord '@')
                    else throwExceptionAt pos IllegalCharacterLiteral
          'o' ->
              do  i <- checkedReadNum isOctDigit 8 octDigit
                  return $ chr i
          'x' ->
              do  i <- checkedReadNum isHexDigit 16 hexDigit
                  return $ chr i
          n | isDigit n ->
              do  i <- readNum isDigit 10 digit
                  return $ chr i
          c ->
              case Map.lookup c charEscMap of
                 Just c' -> setInput input >> return c'
                 Nothing ->
                     do  (c2, input) <- alexGetCharOrFail input
                         case Map.lookup [c, c2] asciiEscMap of
                           Just c' -> setInput input >> return c'
                           Nothing ->
                               do  (c3, input) <- alexGetCharOrFail input
                                   case Map.lookup [c, c2, c3] asciiEscMap of
                                     Just c' ->  setInput input >> return c'
                                     Nothing ->  throwExceptionAt pos IllegalCharacterLiteral
\end{code}

\begin{code}
digit :: Char -> Int
digit c | c >= '0' && c <= '9' = ord c - ord '0'
        | otherwise            = error "error in decimal constant"

octDigit :: Char -> Int
octDigit c | c >= '0' && c <= '7' = ord c - ord '0'
           | otherwise            = error "error in octal constant"

hexDigit :: Char -> Int
hexDigit c | c >= 'a' && c <= 'f' = ord c - ord 'a'
           | c >= 'A' && c <= 'F' = ord c - ord 'A'
           | c >= '0' && c <= '9' = ord c - ord '0'
           | otherwise            = error "error in hexadecimal constant"

checkedReadNum  ::  MonadParser m
                =>  (Char -> Bool)
                ->  Int
                ->  (Char -> Int)
                ->  m Int
checkedReadNum isDigit base conv =
    do  inp@(AlexInput pos _ _) <- getInput
        (c, _) <- alexGetCharOrFail inp
        when (not $ isDigit c) $
            throwExceptionAt pos IllegalNumericLiteral
        readNum isDigit base conv

readNum :: MonadParser m => (Char -> Bool) -> Int -> (Char -> Int) -> m Int
readNum isDigit base conv =
    do  input <- getInput
        read 0 input
    where
      read :: MonadParser m => Int -> AlexInput -> m Int
      read i input =
          do  (c, input') <- alexGetCharOrFail input
              if isDigit c
                then do  let n = conv c
                         read (i*base + n) input'
                else do  setInput input
                         return i
\end{code}

\begin{code}
lexToken :: P (L Token)
lexToken = do
    inp@(AlexInput pos buf off) <- getInput
    sc <- getLexState
    st <- getPEnv
    case alexScanUser st inp sc of
      AlexEOF -> return $ L (Loc pos pos) Teof
      AlexError (AlexInput pos2 _ _) ->
          throwExceptionAt pos2 $
          LexerError (text $ B.unpack $ B.take 80 rest)
        where
          rest = B.drop off buf
      AlexSkip inp2 _ -> do
          setInput inp2
          pos <- getPos
          setLastPos pos
          lexToken
      AlexToken inp2@(AlexInput end _ _) len t -> do
          setInput inp2
          t end (B.drop off buf) len
\end{code}

\begin{code}
}
\end{code}
